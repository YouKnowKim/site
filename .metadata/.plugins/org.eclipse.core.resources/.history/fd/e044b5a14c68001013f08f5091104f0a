package com.yonseidairy.site.service;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import com.yonseidairy.site.dao.RegionDao;
import com.yonseidairy.site.mapper.RegionMapper;

@Service
public class RegionService {
	private static final String KAKAO_REST_API_KEY = "KakaoAK 70f55076ab1f80b4e69e90f9ec18c1b5";

	@Autowired
	private RegionMapper regionMapper;

	// 모든 거래처 위치 정보 가져오기
	public List<RegionDao> selectAllRegions(RegionDao inRegionDao) {
		List<RegionDao> result = new ArrayList<>();
		List<RegionDao> rawList = regionMapper.selectAllRegions(inRegionDao);

		for (RegionDao raw : rawList) {
			raw.setPolygon(parsePolygon(raw.getPolygon_coords()));

			result.add(raw);
		}

		return result;
	};

	// 유통 구분에 따른 위치 정보 가져오기
	public List<RegionDao> selectRegions(RegionDao inRegionDao) {

		List<RegionDao> result = new ArrayList<>();
		List<RegionDao> rawList = regionMapper.selectRegions(inRegionDao);

		for (RegionDao raw : rawList) {
			raw.setPolygon(parsePolygon(raw.getPolygon_coords()));

			result.add(raw);
		}

		return result;
	}

	// 주소 카테고리 가져오기
	public Map<String, Set<String>> selectAddressCategories(RegionDao inRegionDao) {

		List<RegionDao> result = new ArrayList<>();
		List<RegionDao> rawList = regionMapper.selectAddressCategories(inRegionDao);

		// 지역대분류 → 중분류 리스트 저장 구조
		Map<String, Set<String>> categoryMap = new LinkedHashMap<>();

		for (RegionDao raw : rawList) {
			String cat1 = raw.getCategory1();
			String cat2 = raw.getCategory2();

			categoryMap.computeIfAbsent(cat1, k -> new HashSet<>()).add(cat2);
		}

		return categoryMap;
	}

	// 주소에 따른 지역 가져오기
	public HashMap<String, String> getRegionByAddress(RegionDao inRegionDao) {

		HashMap<String, String> result = new HashMap<>();
		
		String address = inRegionDao.getAddress();

		return result;
	}

	// String 위치 정보를 JsonArray로 변경하는 메소드
	private List<double[]> parsePolygon(String json) {
		List<double[]> list = new ArrayList<>();
		JsonArray array = JsonParser.parseString(json).getAsJsonArray();

		for (JsonElement elem : array) {
			JsonArray pair = elem.getAsJsonArray();
			double lat = pair.get(0).getAsDouble();
			double lng = pair.get(1).getAsDouble();
			list.add(new double[] { lat, lng });
		}

		return list;
	}

	// 🧭 Kakao 주소 → 좌표 변환
	private double[] getCoordinatesFromAddress(String address) throws IOException {
		String encoded = URLEncoder.encode(address, "UTF-8");
		URL url = new URL("https://dapi.kakao.com/v2/local/search/address.json?query=" + encoded);

		HttpURLConnection conn = (HttpURLConnection) url.openConnection();
		conn.setRequestProperty("Authorization", KAKAO_REST_API_KEY);
		conn.setRequestMethod("GET");

		BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));
		StringBuilder json = new StringBuilder();
		String line;
		while ((line = br.readLine()) != null) {
			json.append(line);
		}
		br.close();

		JsonObject result = JsonParser.parseString(json.toString()).getAsJsonObject();
		if (result.getAsJsonArray("documents").size() == 0)
			throw new IllegalArgumentException("주소 변환 결과 없음");

		JsonObject pos = result.getAsJsonArray("documents").get(0).getAsJsonObject();
		double lat = pos.get("y").getAsDouble();
		double lng = pos.get("x").getAsDouble();

		return new double[] { lat, lng };
	}

	// 📌 점이 polygon에 포함됐는지 판단하는 알고리즘
	private boolean pointInPolygon(double lat, double lng, List<double[]> polygon) {
		boolean inside = false;
		int j = polygon.size() - 1;

		for (int i = 0; i < polygon.size(); i++) {
			double xi = polygon.get(i)[0], yi = polygon.get(i)[1];
			double xj = polygon.get(j)[0], yj = polygon.get(j)[1];

			boolean intersect = ((yi > lng) != (yj > lng)) && (lat < (xj - xi) * (lng - yi) / (yj - yi + 1e-10) + xi);
			if (intersect)
				inside = !inside;
			j = i;
		}

		return inside;
	}

}
